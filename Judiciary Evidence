pragma solidity ^0.5.1;

contract judiciaryDetails{ 

struct judiciary { 
    uint id;
    string evidencetakenby ;
    string evedencetype;
    string hash;
    string reportofforiensic;
    string investigationagency;
    string reportofjudge;
}

modifier HashCheck(uint _id, string memory _hash) {
 require(keccak256(abi.encodePacked((judiciarys[_id].hash))) == keccak256(abi.encodePacked((_hash))) );
    _;//go the next line
}

uint[] ListOfevidence;

 mapping(uint => judiciary)judiciarys;
 
function CapturingEvedence(uint _id,string memory _evidencetakenby,string memory _hash,string memory _evedencetype)  public {
   if (ValidateEvedence(_id) != true){ 
    judiciarys[_id].id = _id;
    judiciarys[_id].hash = _hash;
    judiciarys[_id].evedencetype = _evedencetype;
    judiciarys[_id].evidencetakenby = _evidencetakenby;
    ListOfevidence.push(_id);
   }
}

function ForiensiesReport(uint _id,string memory _report, string memory _hash)  public HashCheck(_id,_hash) {
    
  if (ValidateEvedence(_id)){
   judiciarys[_id].reportofforiensic = _report;
  }
}

function Investigationagency(uint _id,string memory _report,string memory _hash) public HashCheck(_id,_hash){

   if (ValidateEvedence(_id)){
   judiciarys[_id].investigationagency = _report;

   }
   }
function judgeReport(uint _id,string memory _report,string memory _hash) public HashCheck(_id,_hash){
    if (ValidateEvedence(_id)){
       judiciarys[_id].reportofjudge = _report;
    }
}

    function getjudiciary(uint _id) view public returns(uint,string memory,string memory,string memory,string memory) {
        
    return (judiciarys[_id].id,judiciarys[_id].evidencetakenby,judiciarys[_id].reportofforiensic,judiciarys[_id].investigationagency,judiciarys[_id].reportofjudge);  
    }
    
    function GellAllEvidenceId() view public returns (uint[] memory) {
        return ListOfevidence;
    }
    
    function ValidateEvedence(uint _id) view public returns(bool){
        
        if (judiciarys[_id].id == _id){
        return true;
        }
        
        else {
            return false;
        }
    }
    
}  
